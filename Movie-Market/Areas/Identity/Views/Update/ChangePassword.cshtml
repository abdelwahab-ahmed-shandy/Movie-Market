@using DAL.ViewModels.User
@model ChangePasswordVM

@{
    ViewData["Title"] = "Change Password - MovieMart";

}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6 col-md-8">



            <div class="card shadow-lg border-0 rounded-4 overflow-hidden animate__animated animate__fadeIn">
                <!-- Card Header with Gradient Background -->
                <div class="card-header bg-gradient-primary-to-secondary text-white py-4">
                    <div class="d-flex align-items-center justify-content-center">
                        <i class="bi bi-shield-lock fs-1 me-3"></i>
                        <div>
                            <h2 class="mb-0 text-center fw-bold">Change Password</h2>
                            <p class="mb-0 text-center opacity-75">Secure your account</p>
                        </div>
                    </div>
                </div>

                <!-- Card Body -->
                <div class="card-body p-4 p-md-5">

                    <form asp-action="ChangePassword" method="post" class="needs-validation" novalidate>
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger alert-dismissible fade show mb-4">
                            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        </div>

                        <!-- Current Password -->
                        <div class="form-floating mb-4 position-relative animate__animated animate__fadeIn">
                            <input asp-for="CurrentPassword" class="form-control" placeholder=" " required />
                            <label asp-for="CurrentPassword">Current Password</label>
                            <button type="button" class="btn btn-sm btn-link position-absolute end-0 top-50 translate-middle-y me-2 password-toggle">
                                <i class="bi bi-eye-fill"></i>
                            </button>
                            <div class="invalid-feedback">
                                Please enter your current password
                            </div>
                            <span asp-validation-for="CurrentPassword" class="text-danger small"></span>
                        </div>

                        <!-- New Password -->
                        <div class="form-floating mb-4 position-relative animate__animated animate__fadeIn animate__delay-1s">
                            <input asp-for="NewPassword" class="form-control" placeholder=" " required 
                                   pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@@$!%*?&])[A-Za-z\d@@$!%*?&]{8,}$" />
                            <label asp-for="NewPassword">New Password</label>
                            <button type="button" class="btn btn-sm btn-link position-absolute end-0 top-50 translate-middle-y me-2 password-toggle">
                                <i class="bi bi-eye-fill"></i>
                            </button>
                            <div class="invalid-feedback">
                                Password must contain at least 8 characters, one uppercase, one lowercase, one number and one special character
                            </div>
                            <span asp-validation-for="NewPassword" class="text-danger small"></span>
                            <div class="password-strength mt-2">
                                <div class="progress" style="height: 4px;">
                                    <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                                </div>
                                <small class="text-muted d-block mt-1">Password strength: <span class="strength-text">Weak</span></small>
                            </div>
                        </div>

                        <!-- Confirm Password -->
                        <div class="form-floating mb-4 position-relative animate__animated animate__fadeIn animate__delay-2s">
                            <input asp-for="ConfirmPassword" class="form-control" placeholder=" " required />
                            <label asp-for="ConfirmPassword">Confirm Password</label>
                            <button type="button" class="btn btn-sm btn-link position-absolute end-0 top-50 translate-middle-y me-2 password-toggle">
                                <i class="bi bi-eye-fill"></i>
                            </button>
                            <div class="invalid-feedback">
                                Passwords must match
                            </div>
                            <span asp-validation-for="ConfirmPassword" class="text-danger small"></span>
                        </div>

                        <!-- Action Buttons -->
                        <div class="d-grid gap-3 animate__animated animate__fadeIn animate__delay-3s">
                            <button type="submit" class="btn btn-primary btn-lg rounded-pill py-3">
                                <i class="bi bi-key-fill me-2"></i> Change Password
                            </button>
                            <a asp-area="Identity" asp-controller="Profile" asp-action="Index" class="btn btn-outline-secondary rounded-pill py-3">
                                <i class="bi bi-arrow-left me-2"></i> Back to Profile
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    
    <style>
        .bg-gradient-primary-to-secondary {
            background: linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%);
        }
        
        .card {
            border: none;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .form-control {
            background-color: rgba(255, 255, 255, 0.05);
            border-color: rgba(255, 255, 255, 0.1);
            color: white;
        }
        
        .form-control:focus {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: #6c5ce7;
            box-shadow: 0 0 0 0.25rem rgba(108, 92, 231, 0.25);
            color: white;
        }
        
        .btn-primary {
            background-color: #6c5ce7;
            border-color: #6c5ce7;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            background-color: #5a4bd6;
            border-color: #5a4bd6;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(108, 92, 231, 0.3);
        }
        
        .password-toggle {
            color: #6c757d;
            z-index: 5;
        }
        
        .password-toggle:hover {
            color: #6c5ce7;
        }
        
        /* Password strength meter colors */
        .progress-bar.weak {
            background-color: #dc3545;
            width: 25% !important;
        }
        
        .progress-bar.moderate {
            background-color: #fd7e14;
            width: 50% !important;
        }
        
        .progress-bar.good {
            background-color: #ffc107;
            width: 75% !important;
        }
        
        .progress-bar.strong {
            background-color: #28a745;
            width: 100% !important;
        }
    </style>
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Password toggle functionality
            $('.password-toggle').click(function () {
                const passwordInput = $(this).closest('.position-relative').find('input');
                const icon = $(this).find('i');

                if (passwordInput.attr('type') === 'password') {
                    passwordInput.attr('type', 'text');
                    icon.removeClass('bi-eye-fill').addClass('bi-eye-slash-fill');
                } else {
                    passwordInput.attr('type', 'password');
                    icon.removeClass('bi-eye-slash-fill').addClass('bi-eye-fill');
                }
            });

            // Password strength indicator
            $('#NewPassword').on('input', function () {
                const password = $(this).val();
                const strengthContainer = $(this).closest('.form-floating').find('.password-strength');
                const strengthBar = strengthContainer.find('.progress-bar');
                const strengthText = strengthContainer.find('.strength-text');

                // Reset classes
                strengthBar.removeClass('weak moderate good strong');

                // Calculate strength
                let strength = 0;
                if (password.length >= 8) strength++;
                if (password.match(/[a-z]/)) strength++;
                if (password.match(/[A-Z]/)) strength++;
                if (password.match(/[0-9]/)) strength++;
                if (password.match(/[^A-Za-z0-9]/)) strength++;

                // Update UI
                if (password.length === 0) {
                    strengthBar.css('width', '0%');
                    strengthText.text('Weak');
                } else if (strength <= 2) {
                    strengthBar.addClass('weak').css('width', '25%');
                    strengthText.text('Weak');
                } else if (strength === 3) {
                    strengthBar.addClass('moderate').css('width', '50%');
                    strengthText.text('Moderate');
                } else if (strength === 4) {
                    strengthBar.addClass('good').css('width', '75%');
                    strengthText.text('Good');
                } else {
                    strengthBar.addClass('strong').css('width', '100%');
                    strengthText.text('Strong');
                }
            });

            // Form validation
            (function () {
                'use strict';
                const form = document.querySelector('form');
                form.addEventListener('submit', function (event) {
                    const newPassword = $('#NewPassword').val();
                    const confirmPassword = $('#ConfirmPassword').val();

                    // Password match check
                    if (newPassword !== confirmPassword) {
                        event.preventDefault();
                        event.stopPropagation();
                        $('#ConfirmPassword')[0].setCustomValidity('Passwords do not match');
                    } else {
                        $('#ConfirmPassword')[0].setCustomValidity('');
                    }

                    // General form validation
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();

                        const invalidFields = $(form).find(':invalid');
                        invalidFields.addClass('animate__animated animate__headShake');
                        setTimeout(() => {
                            invalidFields.removeClass('animate__animated animate__headShake');
                        }, 1000);
                    }

                    form.classList.add('was-validated');
                }, false);
            })();
        });
    </script>
}