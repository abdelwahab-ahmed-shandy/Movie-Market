@model DAL.ViewModels.Episode.EpisodeAdminDetailsVM

@{
    ViewData["Title"] = "Episode Details";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>@Model.Title</h1>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
            @if (Model.IsDeleted)
            {
                <form asp-action="Restore" method="post" class="d-inline">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-success">Restore</button>
                </form>
                <form asp-action="Delete" method="post" class="d-inline"
                      onsubmit="return confirm('Permanently delete this episode?');">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-danger">Delete Permanently</button>
                </form>
            }
            else
            {
                <form asp-action="SoftDelete" method="post" class="d-inline">
                    <input type="hidden" name="id" value="@Model.Id" />
                    <button type="submit" class="btn btn-secondary">Delete</button>
                </form>
            }
            <a asp-action="Index" asp-route-seasonId="@Model.SeasonId" class="btn btn-outline-secondary">Back to List</a>
        </div>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <dl class="row">
                        <dt class="col-sm-3">TV Series</dt>
                        <dd class="col-sm-9">@Model.TvSeriesTitle</dd>

                        <dt class="col-sm-3">Season</dt>
                        <dd class="col-sm-9">@Model.SeasonTitle</dd>

                        <dt class="col-sm-3">Episode Number</dt>
                        <dd class="col-sm-9">@Model.EpisodeNumber</dd>

                        <dt class="col-sm-3">Duration</dt>
                        <dd class="col-sm-9">@Model.Duration.ToString(@"hh\:mm\:ss")</dd>

                        <dt class="col-sm-3">Rating</dt>
                        <dd class="col-sm-9">@(Model.Rating?.ToString("0.0") ?? "N/A")</dd>

                        <dt class="col-sm-3">Status</dt>
                        <dd class="col-sm-9">
                            <span class="badge @GetStateBadgeClass(Model.CurrentState)">
                                @Model.CurrentState
                            </span>
                        </dd>

                        <dt class="col-sm-3">Video URL</dt>
                        <dd class="col-sm-9">
                            @if (!string.IsNullOrEmpty(Model.VideoUrl))
                            {
                                <a href="@Model.VideoUrl" target="_blank">View Video</a>
                            }
                            else
                            {
                                <span class="text-muted">Not available</span>
                            }
                        </dd>

                        <dt class="col-sm-3">Thumbnail URL</dt>
                        <dd class="col-sm-9">
                            @if (!string.IsNullOrEmpty(Model.ThumbnailUrl))
                            {
                                <a href="@Model.ThumbnailUrl" target="_blank">View Thumbnail</a>
                            }
                            else
                            {
                                <span class="text-muted">Not available</span>
                            }
                        </dd>

                        <dt class="col-sm-3">Created</dt>
                        <dd class="col-sm-9">@Model.CreatedDateUtc.ToString("g") by @Model.CreatedBy</dd>

                        @if (Model.LastModifiedDateUtc.HasValue)
                        {
                            <dt class="col-sm-3">Last Modified</dt>
                            <dd class="col-sm-9">@Model.LastModifiedDateUtc.Value.ToString("g") by @Model.LastModifiedBy</dd>
                        }
                    </dl>
                </div>
                @if (!string.IsNullOrEmpty(Model.ThumbnailUrl))
                {
                    <div class="col-md-4">
                        <img src="@Model.ThumbnailUrl" class="img-fluid rounded" alt="@Model.Title">
                    </div>
                }
            </div>

            @if (!string.IsNullOrEmpty(Model.Description))
            {
                <div class="mt-4">
                    <h5>Description</h5>
                    <p>@Model.Description</p>
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetStateBadgeClass(CurrentState state)
    {
        return state switch
        {
            CurrentState.Active => "bg-success",
            CurrentState.Inactive => "bg-secondary",
            CurrentState.SoftDelete => "bg-danger",
            CurrentState.Archived => "bg-warning",
            _ => "bg-secondary"
        };
    }
}